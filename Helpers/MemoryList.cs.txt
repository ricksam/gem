using System;
using System.Linq;
using System.Collections.Generic;
using GEM.Repository;
using GEM.Models;

namespace GEM.Helpers{
    public class MemoryList<T> where T : BaseEntity<T>
    {
        public MemoryList(MemoryContainer Parent) {
            this.parent = Parent;
            this._items = new List<T>();
        }

        private MemoryContainer parent { get; set; }
        private List<T> _items { get; set; }

        public List<T> ToList() {
            return _items;
        }

        public List<string> GetStrings()
        {
            List<string> list = new List<string>();
            foreach (var item in _items)
            {
                list.Add(typeof(T).Name + ":" + item.ToString());
            }

            return list;
        }

        public void Clear() {
            _items.Clear();
        }

        public void Add(T item)
        {
            this._items.Add(item);
        }

        public void AddRange(List<T> items) {
            this._items = items;
        }

        public void Save(T model)
        {
            PrimaryKey primaryKey = parent.GetPrimaryKey<T>();

            if (primaryKey != null)
            {
                for (int i = 0; i < _items.Count; i++)
                {
                    if ((int)_items[i].GetAttributeValue(primaryKey.Column) == (int)model.GetAttributeValue(primaryKey.Column))
                    {
                        _items[i] = model;
                        return;
                    }
                }
            }

            if (_items.Count != 0)
            {
                _items.Add(model);
            }
        }

        public void Remove(T model) {
            PrimaryKey primaryKey = parent.GetPrimaryKey<T>();

            if (primaryKey != null)
            {
                for (int i = 0; i < _items.Count; i++)
                {
                    if (_items[i].GetAttributeValue(primaryKey.Column) == model.GetAttributeValue(primaryKey.Column))
                    {
                        _items.RemoveAt(i);
                        break;
                    }
                }
            }
        }

        public void Remove(int Id)
        {
            PrimaryKey primaryKey = parent.GetPrimaryKey<T>();

            if (primaryKey != null)
            {
                for (int i = 0; i < _items.Count; i++)
                {
                    if ((int)_items[i].GetAttributeValue(primaryKey.Column) == Id)
                    {
                        _items.RemoveAt(i);
                        break;
                    }
                }
            }
        }

        public T Find(Predicate<T> match) {
            return _items.Find(match);
        }

        public T FirstOrDefault(Func<T, bool> predicate)
        {
            return _items.FirstOrDefault(predicate);
        }

        public IEnumerable<T> Where(Func<T, bool> predicate)
        {
            return _items.Where(predicate);
        }

        public int Count {
            get { return _items.Count; }
        }
    }
}